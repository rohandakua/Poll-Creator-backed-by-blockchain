package com.example.pollcreator.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class PollCreator_sol_pollContract extends Contract {
    public static final String BINARY = "6080604052348015600e575f5ffd5b506126ea8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610106575f3560e01c80635635647c1161009e578063a5a9fd381161006e578063a5a9fd38146102ab578063ba81656a146102f0578063d4508b2d14610315578063d8cc858714610328578063e634da951461033b575f5ffd5b80635635647c1461024f57806359b48170146102725780636e3b58a914610285578063811887fb14610298575f5ffd5b806334b5c35b116100d957806334b5c35b1461017e57806337c256261461019e5780633e39a7a5146101c357806351efd580146101d6575f5ffd5b80630c182c091461010a57806310a62a3f146101305780631c6fc850146101565780632861744b1461016b575b5f5ffd5b61011d610118366004611ea5565b610383565b6040519081526020015b60405180910390f35b61014361013e366004611ea5565b6103a2565b6040516101279796959493929190611eea565b610169610164366004611f3a565b610473565b005b610169610179366004611ea5565b6107eb565b61019161018c366004611ea5565b610817565b6040516101279190611f69565b6101b16101ac366004611ea5565b61095d565b60405160ff9091168152602001610127565b6101916101d1366004611ea5565b61099a565b61021b6101e4366004611ea5565b60036020525f908152604090208054600182015460028301546005909301546001600160a01b0390921692909160ff918216911684565b604080516001600160a01b039095168552602085019390935260ff9091169183019190915215156060820152608001610127565b61026261025d366004612102565b610ad5565b6040519015158152602001610127565b610169610280366004612259565b610b20565b610169610293366004612259565b610da1565b6101696102a6366004612283565b610fc7565b61021b6102b9366004611ea5565b60056020525f908152604090208054600182015460028301546004909301546001600160a01b0390921692909160ff918216911684565b6103036102fe3660046122f2565b611322565b60405161012796959493929190612312565b610169610323366004611ea5565b611408565b610169610336366004612356565b611513565b61036b6103493660046122f2565b5f6020818152928152604080822090935290815220546001600160a01b031681565b6040516001600160a01b039091168152602001610127565b60048181548110610392575f80fd5b5f91825260209091200154905081565b60026020525f9081526040902080546001820180549192916103c3906123b2565b80601f01602080910402602001604051908101604052809291908181526020018280546103ef906123b2565b801561043a5780601f106104115761010080835404028352916020019161043a565b820191905f5260205f20905b81548152906001019060200180831161041d57829003601f168201915b5050505060028301546003840154600485015460059095015493946001600160a01b039092169390925060ff8082169161010090041687565b5f84815260026020526040902060050154610100900460ff166104d55760405162461bcd60e51b8152602060048201526015602482015274151a195c99481a5cc81b9bc81cdd58da081c1bdb1b605a1b60448201526064015b60405180910390fd5b5f8481526001602052604090208054839190859081106104f7576104f76123ea565b905f5260205f20906006020160010154146105545760405162461bcd60e51b815260206004820152601f60248201527f5468652063616e646964617465206973206e6f7420726567697374657265640060448201526064016104cc565b5f8181526003602052604090206005015460ff166105be5760405162461bcd60e51b815260206004820152602160248201527f796f7520617265206e6f742072656769737465726564206173206120766f74656044820152603960f91b60648201526084016104cc565b5f84815260208181526040808320848452909152902054336001600160a01b03909116036106275760405162461bcd60e51b81526020600482015260166024820152751e5bdd48185b1c9958591e481a185d99481d9bdd195960521b60448201526064016104cc565b5f848152600260208181526040808420600501548585526003909252909220015460ff918216911610156106b25760405162461bcd60e51b815260206004820152602c60248201527f796f7520617265206e6f7420656c696769626c6520666f7220766f74696e672060448201526b1a5b881d1a1a5cc81c1bdb1b60a21b60648201526084016104cc565b5f848152600260205260409020600301544210156107125760405162461bcd60e51b815260206004820152601e60248201527f54686520706f6c6c20686173206e6f74206265656e207374617274656420000060448201526064016104cc565b5f848152600260205260409020600401544211156107725760405162461bcd60e51b815260206004820152601960248201527f54686520706f6c6c20686173206265656e20636c6f736564200000000000000060448201526064016104cc565b5f848152600160208190526040909120805485908110610794576107946123ea565b905f5260205f2090600602016005015f8282546107b19190612412565b90915550505f84815260208181526040808320848452909152902080546001600160a01b031916331790556107e5846107eb565b50505050565b5f81815260016020819052604082208054909261081392849261080e9190612425565b611896565b5050565b606060015f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610952575f8481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001810154938301939093526002830154908201526003820180549192916060840191906108a6906123b2565b80601f01602080910402602001604051908101604052809291908181526020018280546108d2906123b2565b801561091d5780601f106108f45761010080835404028352916020019161091d565b820191905f5260205f20905b81548152906001019060200180831161090057829003601f168201915b5050509183525050600482015460ff166020808301919091526005909201546040909101529082526001929092019101610849565b505050509050919050565b5f815f0361096d57506001919050565b5f5b821561099457610980600a84612438565b92508061098c81612457565b91505061096f565b92915050565b606060015f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610952575f8481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382018054919291606084019190610a29906123b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a55906123b2565b8015610aa05780601f10610a7757610100808354040283529160200191610aa0565b820191905f5260205f20905b815481529060010190602001808311610a8357829003601f168201915b5050509183525050600482015460ff1660208083019190915260059092015460409091015290825260019290920191016109cc565b5f805b8351811015610b175782848281518110610af457610af46123ea565b60200260200101516020015103610b0f576001915050610994565b600101610ad8565b505f9392505050565b5f8160ff1611610b675760405162461bcd60e51b8152602060048201526012602482015271151a19481859d9481a5cc81a5b9d985b1a5960721b60448201526064016104cc565b610b708261095d565b60ff16600c14610bbd5760405162461bcd60e51b8152602060048201526018602482015277151a19481058591a185c881b9bc81a5cc81a5b9d985b1a5960421b60448201526064016104cc565b5f8281526003602052604090206005015460ff1615610c1e5760405162461bcd60e51b815260206004820152601f60248201527f54686520566f74657220697320616c726561647920726567697374657265640060448201526064016104cc565b5f6040518060c00160405280336001600160a01b031681526020018481526020018360ff1681526020015f6001600160401b03811115610c6057610c60612016565b604051908082528060200260200182016040528015610c89578160200160208202803683370190505b5081526020015f604051908082528060200260200182016040528015610cb9578160200160208202803683370190505b508152600160209182018190525f8681526003808452604091829020855181546001600160a01b0319166001600160a01b0390911617815585850151938101939093559084015160028301805460ff191660ff9092169190911790556060840151805194955085949293610d339392850192910190611e2a565b5060808201518051610d4f916004840191602090910190611e2a565b5060a091909101516005909101805460ff19169115159190911790555050600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b5f8160ff1611610de85760405162461bcd60e51b8152602060048201526012602482015271151a19481859d9481a5cc81a5b9d985b1a5960721b60448201526064016104cc565b610df18261095d565b60ff16600c14610e3e5760405162461bcd60e51b8152602060048201526018602482015277151a19481058591a185c881b9bc81a5cc81a5b9d985b1a5960421b60448201526064016104cc565b5f8281526005602052604090206004015460ff1615610e9f5760405162461bcd60e51b815260206004820152601f60248201527f5468652041646d696e20697320616c726561647920726567697374657265640060448201526064016104cc565b5f8281526003602052604090206005015460ff16610ec157610ec18282610b20565b5f6040518060a00160405280336001600160a01b031681526020018481526020018360ff1681526020015f6001600160401b03811115610f0357610f03612016565b604051908082528060200260200182016040528015610f2c578160200160208202803683370190505b508152600160209182018190525f86815260058352604090819020845181546001600160a01b0319166001600160a01b03909116178155848401519281019290925583015160028201805460ff191660ff9092169190911790556060830151805193945084939192610fa692600385019290910190611e2a565b50608091909101516004909101805460ff1916911515919091179055505050565b5f86815260026020526040902060050154610100900460ff16156110425760405162461bcd60e51b815260206004820152602c60248201527f54686520506f6c6c20496420697320616c72656164792074616b656e2062792060448201526b185b9bdd1a195c88141bdb1b60a21b60648201526084016104cc565b61104e61012c84612425565b84106110ae5760405162461bcd60e51b815260206004820152602960248201527f5468652054696d652069732065697468657220546f6f20736d616c6c206f72206044820152681b9bdd081d985b1a5960ba1b60648201526084016104cc565b5f8260ff16116110ee5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642041676560a81b60448201526064016104cc565b5f8181526005602052604090206004015460ff16801561112357505f818152600560205260409020546001600160a01b031633145b6111865760405162461bcd60e51b815260206004820152602e60248201527f5468657265206973206e6f20737563682061646d696e206f7220596f7520617260448201526d32903737ba1030b71030b236b4b760911b60648201526084016104cc565b6040805160e08101825287815260208082018881523383850152606083018890526080830187905260ff861660a0840152600160c084018190525f8b815260029093529390912082518155905191928392908201906111e590826124c0565b506040828101516002830180546001600160a01b0319166001600160a01b0390921691909117905560608301516003808401919091556080840151600484015560a08401516005938401805460c09096015160ff90921661ffff199096169590951761010091151591909102179093555f8581526020928352908120909201805460018181018355918452828420018a905589835290525b600454811015611318578360ff1660035f600484815481106112a1576112a16123ea565b5f918252602080832090910154835282019290925260400190206002015460ff16106113105760035f600483815481106112dd576112dd6123ea565b5f918252602080832090910154835282810193909352604090910181206004018054600181018255908252919020018890555b60010161127d565b5050505050505050565b6001602052815f5260405f20818154811061133b575f80fd5b5f91825260209091206006909102018054600182015460028301546003840180546001600160a01b0390941696509194509291611377906123b2565b80601f01602080910402602001604051908101604052809291908181526020018280546113a3906123b2565b80156113ee5780601f106113c5576101008083540402835291602001916113ee565b820191905f5260205f20905b8154815290600101906020018083116113d157829003601f168201915b505050506004830154600590930154919260ff1691905086565b5f8181526005602052604090206004015460ff166114685760405162461bcd60e51b815260206004820152601860248201527f5468652075736572206973206e6f7420616e2041646d696e000000000000000060448201526064016104cc565b5f8181526003602052604090206005015460ff166114c85760405162461bcd60e51b815260206004820152601860248201527f5468652075736572206973206e6f7420616e20566f746572000000000000000060448201526064016104cc565b5f81815260056020526040812080546001600160a01b03191681556001810182905560028101805460ff19169055906115046003830182611e73565b50600401805460ff1916905550565b5f83815260026020526040902060050154610100900460ff166115705760405162461bcd60e51b8152602060048201526015602482015274151a195c99481a5cc81b9bc81cdd58da081c1bdb1b605a1b60448201526064016104cc565b6116b660015f8581526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156116ac575f8481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382018054919291606084019190611600906123b2565b80601f016020809104026020016040519081016040528092919081815260200182805461162c906123b2565b80156116775780601f1061164e57610100808354040283529160200191611677565b820191905f5260205f20905b81548152906001019060200180831161165a57829003601f168201915b5050509183525050600482015460ff1660208083019190915260059092015460409091015290825260019290920191016115a3565b5050505085610ad5565b156117035760405162461bcd60e51b815260206004820181905260248201527f5468652043616e64696461746520697320616c72656164792070726573656e7460448201526064016104cc565b5f8381526002602052604090206003015442106117625760405162461bcd60e51b815260206004820152601960248201527f54686520506f6c6c20686173206265656e20737461727465640000000000000060448201526064016104cc565b5f8381526002602052604090206005015460ff90811690821610156117d35760405162461bcd60e51b815260206004820152602160248201527f596f752061726520736d616c6c6572207468656e2072657175697265642061676044820152606560f81b60648201526084016104cc565b6040805160c08101825233815260208082018781528284018781526060840187815260ff871660808601525f60a08601819052898152600180865296812080548089018255908252949020855160069095020180546001600160a01b0319166001600160a01b0390951694909417845591519483019490945592516002820155915190918291600382019061186890826124c0565b50608082015160048201805460ff191660ff90921691909117905560a0909101516005909101555050505050565b808212156118d1575f6118aa8484846118d6565b90506118bc848461080e60018561257d565b6107e5846118cb8360016125a3565b84611896565b505050565b5f5f8483815481106118ea576118ea6123ea565b5f9182526020822060056006909202010154915061190960018661257d565b9050845b84811215611ba95782878281548110611928576119286123ea565b905f5260205f209060060201600501541115611ba15781611948816125ca565b9250505f87838154811061195e5761195e6123ea565b905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481526020016003820180546119c6906123b2565b80601f01602080910402602001604051908101604052809291908181526020018280546119f2906123b2565b8015611a3d5780601f10611a1457610100808354040283529160200191611a3d565b820191905f5260205f20905b815481529060010190602001808311611a2057829003601f168201915b5050509183525050600482015460ff1660208201526005909101546040909101528854909150889083908110611a7557611a756123ea565b905f5260205f209060060201888481548110611a9357611a936123ea565b5f9182526020909120825460069092020180546001600160a01b0319166001600160a01b039092169190911781556001808301549082015560028083015490820155600380820190611ae7908401826125e8565b50600482810154908201805460ff191660ff90921691909117905560059182015491015587548190899084908110611b2157611b216123ea565b5f91825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018201556040820151600282015560608201516003820190611b7890826124c0565b50608082015160048201805460ff191660ff90921691909117905560a090910151600590910155505b60010161190d565b505f86611bb78360016125a3565b81548110611bc757611bc76123ea565b905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152602001600382018054611c2f906123b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5b906123b2565b8015611ca65780601f10611c7d57610100808354040283529160200191611ca6565b820191905f5260205f20905b815481529060010190602001808311611c8957829003601f168201915b5050509183525050600482015460ff1660208201526005909101546040909101528754909150879086908110611cde57611cde6123ea565b905f5260205f20906006020187836001611cf891906125a3565b81548110611d0857611d086123ea565b5f9182526020909120825460069092020180546001600160a01b0319166001600160a01b039092169190911781556001808301549082015560028083015490820155600380820190611d5c908401826125e8565b50600482810154908201805460ff191660ff90921691909117905560059182015491015586548190889087908110611d9657611d966123ea565b5f91825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018201556040820151600282015560608201516003820190611ded90826124c0565b50608082015160048201805460ff191660ff90921691909117905560a090910151600590910155611e1f8260016125a3565b979650505050505050565b828054828255905f5260205f20908101928215611e63579160200282015b82811115611e63578251825591602001919060010190611e48565b50611e6f929150611e91565b5090565b5080545f8255905f5260205f2090810190611e8e9190611e91565b50565b5b80821115611e6f575f8155600101611e92565b5f60208284031215611eb5575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b87815260e060208201525f611f0260e0830189611ebc565b6001600160a01b03979097166040830152506060810194909452608084019290925260ff1660a0830152151560c09091015292915050565b5f5f5f5f60808587031215611f4d575f5ffd5b5050823594602084013594506040840135936060013592509050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561200a57603f19878603018452815160018060a01b0381511686526020810151602087015260408101516040870152606081015160c06060880152611fdb60c0880182611ebc565b60808381015160ff169089015260a0928301519290970191909152506020938401939190910190600101611f8f565b50929695505050505050565b634e487b7160e01b5f52604160045260245ffd5b60405160c081016001600160401b038111828210171561204c5761204c612016565b60405290565b604051601f8201601f191681016001600160401b038111828210171561207a5761207a612016565b604052919050565b5f82601f830112612091575f5ffd5b81356001600160401b038111156120aa576120aa612016565b6120bd601f8201601f1916602001612052565b8181528460208386010111156120d1575f5ffd5b816020850160208301375f918101602001919091529392505050565b803560ff811681146120fd575f5ffd5b919050565b5f5f60408385031215612113575f5ffd5b82356001600160401b03811115612128575f5ffd5b8301601f81018513612138575f5ffd5b80356001600160401b0381111561215157612151612016565b8060051b61216160208201612052565b9182526020818401810192908101908884111561217c575f5ffd5b6020850192505b838310156122475782356001600160401b038111156121a0575f5ffd5b850160c0818b03601f190112156121b5575f5ffd5b6121bd61202a565b60208201356001600160a01b03811681146121d6575f5ffd5b8152604082810135602083015260608301359082015260808201356001600160401b03811115612204575f5ffd5b6122138c602083860101612082565b60608301525061222560a083016120ed565b608082015260c0919091013560a0820152825260209283019290910190612183565b98602097909701359750505050505050565b5f5f6040838503121561226a575f5ffd5b8235915061227a602084016120ed565b90509250929050565b5f5f5f5f5f5f60c08789031215612298575f5ffd5b8635955060208701356001600160401b038111156122b4575f5ffd5b6122c089828a01612082565b95505060408701359350606087013592506122dd608088016120ed565b9598949750929591949360a090920135925050565b5f5f60408385031215612303575f5ffd5b50508035926020909101359150565b60018060a01b038716815285602082015284604082015260c060608201525f61233e60c0830186611ebc565b60ff9490941660808301525060a00152949350505050565b5f5f5f5f60808587031215612369575f5ffd5b843593506020850135925060408501356001600160401b0381111561238c575f5ffd5b61239887828801612082565b9250506123a7606086016120ed565b905092959194509250565b600181811c908216806123c657607f821691505b6020821081036123e457634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610994576109946123fe565b81810381811115610994576109946123fe565b5f8261245257634e487b7160e01b5f52601260045260245ffd5b500490565b5f60ff821660ff810361246c5761246c6123fe565b60010192915050565b601f8211156118d157805f5260205f20601f840160051c8101602085101561249a5750805b601f840160051c820191505b818110156124b9575f81556001016124a6565b5050505050565b81516001600160401b038111156124d9576124d9612016565b6124ed816124e784546123b2565b84612475565b6020601f821160018114612522575f83156125085750848201515b600184901b5f19600386901b1c198216175b8555506124b9565b5f84815260208120601f198516915b828110156125515787850151825560209485019460019092019101612531565b508482101561256e57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8181035f83128015838313168383128216171561259c5761259c6123fe565b5092915050565b8082018281125f8312801582168215821617156125c2576125c26123fe565b505092915050565b5f6001600160ff1b0182016125e1576125e16123fe565b5060010190565b8181036125f3575050565b6125fd82546123b2565b6001600160401b0381111561261457612614612016565b612622816124e784546123b2565b5f601f821160018114612651575f8315612508575081850154600184901b5f19600386901b1c1982161761251a565b5f8581526020808220868352908220601f198616925b838110156126875782860154825560019586019590910190602001612667565b50858310156126a457818501545f19600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122080f6f68613dd1144176fc97019e352b8b34ac54dc16b5577104071822ecbb6b464736f6c634300081b0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ALLADMIN = "AllAdmin";

    public static final String FUNC_ALLPOLLS = "AllPolls";

    public static final String FUNC_ALLVOTER = "AllVoter";

    public static final String FUNC_ALLVOTERAADHAR = "AllVoterAadhar";

    public static final String FUNC_LISTOFCANDIDATE = "ListOfCandidate";

    public static final String FUNC_VOTERSWHOHAVEVOTED = "VotersWhoHaveVoted";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_COUNTDIGIT = "countDigit";

    public static final String FUNC_CREATEADMIN = "createAdmin";

    public static final String FUNC_CREATECANDIDATE = "createCandidate";

    public static final String FUNC_CREATEPOLL = "createPoll";

    public static final String FUNC_CREATEVOTER = "createVoter";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_ISCANDIDATEPRESENT = "isCandidatePresent";

    public static final String FUNC_SORTCANDIDATES = "sortCandidates";

    public static final String FUNC_VIEWPOLLRESULT = "viewPollResult";

    @Deprecated
    protected PollCreator_sol_pollContract(String contractAddress, Web3j web3j,
                                           Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PollCreator_sol_pollContract(String contractAddress, Web3j web3j,
                                           Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PollCreator_sol_pollContract(String contractAddress, Web3j web3j,
                                           TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PollCreator_sol_pollContract(String contractAddress, Web3j web3j,
                                           TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>> AllAdmin(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>> AllPolls(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLPOLLS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>> AllVoter(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLVOTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> AllVoterAadhar(BigInteger param0) {
        final Function function = new Function(FUNC_ALLVOTERAADHAR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>> ListOfCandidate(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_LISTOFCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> VotersWhoHaveVoted(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_VOTERSWHOHAVEVOTED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger pollIdInput,
                                                           BigInteger candidateIdInput, BigInteger candidateAadharInput,
                                                           BigInteger voterAadharNoInput) {
        final Function function = new Function(
                FUNC_CASTVOTE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pollIdInput),
                        new org.web3j.abi.datatypes.generated.Uint256(candidateIdInput),
                        new org.web3j.abi.datatypes.generated.Uint256(candidateAadharInput),
                        new org.web3j.abi.datatypes.generated.Uint256(voterAadharNoInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> countDigit(BigInteger number) {
        final Function function = new Function(FUNC_COUNTDIGIT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(number)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createAdmin(BigInteger aadharNoInput,
                                                              BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(aadharNoInput),
                        new org.web3j.abi.datatypes.generated.Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createCandidate(BigInteger aadharNoInput,
                                                                  BigInteger pollIdInput, String agendaInput, BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATECANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(aadharNoInput),
                        new org.web3j.abi.datatypes.generated.Uint256(pollIdInput),
                        new org.web3j.abi.datatypes.Utf8String(agendaInput),
                        new org.web3j.abi.datatypes.generated.Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createPoll(BigInteger pollIdInput,
                                                             String agendaOfPollInput, BigInteger startTimeInput, BigInteger endTimeInput,
                                                             BigInteger ageInput, BigInteger adminAadharNo) {
        final Function function = new Function(
                FUNC_CREATEPOLL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pollIdInput),
                        new org.web3j.abi.datatypes.Utf8String(agendaOfPollInput),
                        new org.web3j.abi.datatypes.generated.Uint256(startTimeInput),
                        new org.web3j.abi.datatypes.generated.Uint256(endTimeInput),
                        new org.web3j.abi.datatypes.generated.Uint8(ageInput),
                        new org.web3j.abi.datatypes.generated.Uint256(adminAadharNo)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createVoter(BigInteger aadharNoInput,
                                                              BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATEVOTER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(aadharNoInput),
                        new org.web3j.abi.datatypes.generated.Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAdmin(BigInteger aadharNoInput) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(aadharNoInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getCandidates(BigInteger pollIdInput) {
        final Function function = new Function(FUNC_GETCANDIDATES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pollIdInput)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isCandidatePresent(List<Candidate> _candidates,
                                                          BigInteger aadharNo) {
        final Function function = new Function(FUNC_ISCANDIDATEPRESENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Candidate>(
                                Candidate.class, _candidates),
                        new org.web3j.abi.datatypes.generated.Uint256(aadharNo)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> sortCandidates(BigInteger pollIdInput) {
        final Function function = new Function(
                FUNC_SORTCANDIDATES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pollIdInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> viewPollResult(BigInteger pollIdInput) {
        final Function function = new Function(FUNC_VIEWPOLLRESULT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pollIdInput)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static PollCreator_sol_pollContract load(String contractAddress, Web3j web3j,
                                                    Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PollCreator_sol_pollContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PollCreator_sol_pollContract load(String contractAddress, Web3j web3j,
                                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PollCreator_sol_pollContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PollCreator_sol_pollContract load(String contractAddress, Web3j web3j,
                                                    Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PollCreator_sol_pollContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PollCreator_sol_pollContract load(String contractAddress, Web3j web3j,
                                                    TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PollCreator_sol_pollContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PollCreator_sol_pollContract> deploy(Web3j web3j,
                                                                  Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PollCreator_sol_pollContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<PollCreator_sol_pollContract> deploy(Web3j web3j,
                                                                  Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PollCreator_sol_pollContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<PollCreator_sol_pollContract> deploy(Web3j web3j,
                                                                  TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PollCreator_sol_pollContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<PollCreator_sol_pollContract> deploy(Web3j web3j,
                                                                  TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PollCreator_sol_pollContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Candidate extends DynamicStruct {
        public String _candidate;

        public BigInteger _aadharNo;

        public BigInteger _pollId;

        public String _agenda;

        public BigInteger _age;

        public BigInteger _voteCount;

        public Candidate(String _candidate, BigInteger _aadharNo, BigInteger _pollId,
                         String _agenda, BigInteger _age, BigInteger _voteCount) {
            super(new org.web3j.abi.datatypes.Address(160, _candidate),
                    new org.web3j.abi.datatypes.generated.Uint256(_aadharNo),
                    new org.web3j.abi.datatypes.generated.Uint256(_pollId),
                    new org.web3j.abi.datatypes.Utf8String(_agenda),
                    new org.web3j.abi.datatypes.generated.Uint8(_age),
                    new org.web3j.abi.datatypes.generated.Uint256(_voteCount));
            this._candidate = _candidate;
            this._aadharNo = _aadharNo;
            this._pollId = _pollId;
            this._agenda = _agenda;
            this._age = _age;
            this._voteCount = _voteCount;
        }

        public Candidate(Address _candidate, Uint256 _aadharNo, Uint256 _pollId, Utf8String _agenda,
                         Uint8 _age, Uint256 _voteCount) {
            super(_candidate, _aadharNo, _pollId, _agenda, _age, _voteCount);
            this._candidate = _candidate.getValue();
            this._aadharNo = _aadharNo.getValue();
            this._pollId = _pollId.getValue();
            this._agenda = _agenda.getValue();
            this._age = _age.getValue();
            this._voteCount = _voteCount.getValue();
        }
    }
}

