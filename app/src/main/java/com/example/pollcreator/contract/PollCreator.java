package com.example.pollcreator.contract;


import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class PollCreator extends Contract {
    public static final String BINARY = "6080604052348015600e575f5ffd5b50613e1f8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610109575f3560e01c806359b48170116100a0578063a5a9fd381161006f578063a5a9fd38146102f2578063ba81656a14610325578063d4508b2d1461035a578063d8cc858714610376578063e634da951461039257610109565b806359b48170146102825780635be5e3ec1461029e5780636e3b58a9146102ba578063811887fb146102d657610109565b806337c25626116100dc57806337c25626146101bf5780633e39a7a5146101ef57806351efd5801461021f5780635635647c1461025257610109565b80630c182c091461010d57806310a62a3f1461013d5780632861744b1461017357806334b5c35b1461018f575b5f5ffd5b61012760048036038101906101229190612526565b6103c2565b6040516101349190612560565b60405180910390f35b61015760048036038101906101529190612526565b6103e2565b60405161016a979695949392919061265d565b60405180910390f35b61018d60048036038101906101889190612526565b6104de565b005b6101a960048036038101906101a49190612526565b610511565b6040516101b69190612887565b60405180910390f35b6101d960048036038101906101d49190612526565b61069c565b6040516101e691906128a7565b60405180910390f35b61020960048036038101906102049190612526565b6106e5565b6040516102169190612887565b60405180910390f35b61023960048036038101906102349190612526565b610870565b60405161024994939291906128c0565b60405180910390f35b61026c60048036038101906102679190612c26565b6108d3565b6040516102799190612c80565b60405180910390f35b61029c60048036038101906102979190612c99565b610929565b005b6102b860048036038101906102b39190612cd7565b610c00565b005b6102d460048036038101906102cf9190612c99565b610ff3565b005b6102f060048036038101906102eb9190612d27565b611269565b005b61030c60048036038101906103079190612526565b61165d565b60405161031c94939291906128c0565b60405180910390f35b61033f600480360381019061033a9190612dcc565b6116c0565b60405161035196959493929190612e0a565b60405180910390f35b610374600480360381019061036f9190612526565b6117c3565b005b610390600480360381019061038b9190612e70565b6118fb565b005b6103ac60048036038101906103a79190612dcc565b611d08565b6040516103b99190612ef0565b60405180910390f35b600481815481106103d1575f80fd5b905f5260205f20015f915090505481565b6002602052805f5260405f205f91509050805f01549080600101805461040790612f36565b80601f016020809104026020016040519081016040528092919081815260200182805461043390612f36565b801561047e5780601f106104555761010080835404028352916020019161047e565b820191905f5260205f20905b81548152906001019060200180831161046157829003601f168201915b505050505090806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005015f9054906101000a900460ff16908060050160019054906101000a900460ff16905087565b5f60015f8381526020019081526020015f20905061050d815f600184805490506105089190612f93565b611d44565b5050565b606060015f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610691578382905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820180546105dc90612f36565b80601f016020809104026020016040519081016040528092919081815260200182805461060890612f36565b80156106535780601f1061062a57610100808354040283529160200191610653565b820191905f5260205f20905b81548152906001019060200180831161063657829003601f168201915b50505050508152602001600482015f9054906101000a900460ff1660ff1660ff16815260200160058201548152505081526020019060010190610543565b505050509050919050565b5f5f82036106ad57600190506106e0565b5f5f90505b5f83146106db57600a836106c69190612ff3565b925080806106d390613023565b9150506106b2565b809150505b919050565b606060015f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610865578382905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820180546107b090612f36565b80601f01602080910402602001604051908101604052809291908181526020018280546107dc90612f36565b80156108275780601f106107fe57610100808354040283529160200191610827565b820191905f5260205f20905b81548152906001019060200180831161080a57829003601f168201915b50505050508152602001600482015f9054906101000a900460ff1660ff1660ff16815260200160058201548152505081526020019060010190610717565b505050509050919050565b6003602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015f9054906101000a900460ff1690806005015f9054906101000a900460ff16905084565b5f5f5f90505b835181101561091e57828482815181106108f6576108f561304b565b5b60200260200101516020015103610911576001915050610923565b80806001019150506108d9565b505f90505b92915050565b5f8160ff161161096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906130c2565b60405180910390fd5b600c6109798361069c565b60ff16146109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b39061312a565b60405180910390fd5b60035f8381526020019081526020015f206005015f9054906101000a900460ff1615610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1490613192565b60405180910390fd5b5f6040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360ff1681526020015f67ffffffffffffffff811115610a6e57610a6d612907565b5b604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b5081526020015f67ffffffffffffffff811115610abc57610abb612907565b5b604051908082528060200260200182016040528015610aea5781602001602082028036833780820191505090505b5081526020016001151581525090508060035f8581526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015f6101000a81548160ff021916908360ff1602179055506060820151816003019080519060200190610b9592919061245e565b506080820151816004019080519060200190610bb292919061245e565b5060a0820151816005015f6101000a81548160ff021916908315150217905550905050600483908060018154018082558091505060019003905f5260205f20015f9091909190915055505050565b60025f8481526020019081526020015f2060050160019054906101000a900460ff16610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c58906131fa565b60405180910390fd5b60035f8281526020019081526020015f206005015f9054906101000a900460ff16610cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb890613288565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff165f5f8581526020019081526020015f205f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d64906132f0565b60405180910390fd5b60025f8481526020019081526020015f206005015f9054906101000a900460ff1660ff1660035f8381526020019081526020015f206002015f9054906101000a900460ff1660ff161015610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded9061337e565b60405180910390fd5b4260025f8581526020019081526020015f20600301541115610e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e44906133e6565b60405180910390fd5b4260025f8581526020019081526020015f20600401541015610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b9061344e565b60405180910390fd5b5f60015f8581526020019081526020015f2090505f5f90505f5f90505b8280549050811015610f455784838281548110610ee157610ee061304b565b5b905f5260205f2090600602016001015403610f38576001838281548110610f0b57610f0a61304b565b5b905f5260205f2090600602016005015f828254610f28919061346c565b9250508190555060019150610f45565b8080600101915050610ec1565b5080610f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7d906134e9565b60405180910390fd5b335f5f8781526020019081526020015f205f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610fec856104de565b5050505050565b5f8160ff1611611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102f906130c2565b60405180910390fd5b600c6110438361069c565b60ff1614611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107d9061312a565b60405180910390fd5b60055f8381526020019081526020015f206004015f9054906101000a900460ff16156110e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110de90613551565b60405180910390fd5b60035f8381526020019081526020015f206005015f9054906101000a900460ff16611117576111168282610929565b5b5f6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018360ff1681526020015f67ffffffffffffffff81111561116857611167612907565b5b6040519080825280602002602001820160405280156111965781602001602082028036833780820191505090505b5081526020016001151581525090508060055f8581526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015f6101000a81548160ff021916908360ff160217905550606082015181600301908051906020019061124192919061245e565b506080820151816004015f6101000a81548160ff021916908315150217905550905050505050565b5f151560025f8881526020019081526020015f2060050160019054906101000a900460ff161515146112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c7906135df565b60405180910390fd5b61012c836112de9190612f93565b841061131f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113169061366d565b60405180910390fd5b5f8260ff1611611364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135b906136d5565b60405180910390fd5b60055f8281526020019081526020015f206004015f9054906101000a900460ff1680156113ee57503373ffffffffffffffffffffffffffffffffffffffff1660055f8381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490613763565b60405180910390fd5b5f6040518060e001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018460ff1681526020016001151581525090508060025f8981526020019081526020015f205f820151815f015560208201518160010190816114ae9190613921565b506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015f6101000a81548160ff021916908360ff16021790555060c08201518160050160016101000a81548160ff02191690831515021790555090505060055f8381526020019081526020015f2060030187908060018154018082558091505060019003905f5260205f20015f909190919091505560015f8881526020019081526020015f20505f5f90505b600480549050811015611653578360ff1660035f600484815481106115c3576115c261304b565b5b905f5260205f20015481526020019081526020015f206002015f9054906101000a900460ff1660ff16106116465760035f600483815481106116085761160761304b565b5b905f5260205f20015481526020019081526020015f2060040188908060018154018082558091505060019003905f5260205f20015f90919091909150555b808060010191505061159b565b5050505050505050565b6005602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015f9054906101000a900460ff1690806004015f9054906101000a900460ff16905084565b6001602052815f5260405f2081815481106116d9575f80fd5b905f5260205f2090600602015f9150915050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201549080600301805461172a90612f36565b80601f016020809104026020016040519081016040528092919081815260200182805461175690612f36565b80156117a15780601f10611778576101008083540402835291602001916117a1565b820191905f5260205f20905b81548152906001019060200180831161178457829003601f168201915b505050505090806004015f9054906101000a900460ff16908060050154905086565b60055f8281526020019081526020015f206004015f9054906101000a900460ff16611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a90613a3a565b60405180910390fd5b60035f8281526020019081526020015f206005015f9054906101000a900460ff16611883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187a90613aa2565b60405180910390fd5b60055f8281526020019081526020015f205f5f82015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f9055600282015f6101000a81549060ff0219169055600382015f6118e391906124a9565b600482015f6101000a81549060ff0219169055505050565b60025f8481526020019081526020015f2060050160019054906101000a900460ff1661195c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611953906131fa565b60405180910390fd5b611ae760015f8581526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015611add578382905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054611a2890612f36565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5490612f36565b8015611a9f5780601f10611a7657610100808354040283529160200191611a9f565b820191905f5260205f20905b815481529060010190602001808311611a8257829003601f168201915b50505050508152602001600482015f9054906101000a900460ff1660ff1660ff1681526020016005820154815250508152602001906001019061198f565b50505050856108d3565b15611b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1e90613b0a565b60405180910390fd5b60025f8481526020019081526020015f20600301544210611b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7490613b72565b60405180910390fd5b60025f8481526020019081526020015f206005015f9054906101000a900460ff1660ff168160ff161015611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd90613c00565b60405180910390fd5b5f6040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018360ff1681526020015f815250905060015f8581526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600602015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003019081611cd49190613921565b506080820151816004015f6101000a81548160ff021916908360ff16021790555060a0820151816005015550505050505050565b5f602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80821215611d8a575f611d58848484611d8f565b9050611d718484600184611d6c9190613c27565b611d44565b611d8884600183611d829190613c67565b84611d44565b505b505050565b5f5f848381548110611da457611da361304b565b5b905f5260205f2090600602016005015490505f600185611dc49190613c27565b90505f8590505b848112156121235782878281548110611de757611de661304b565b5b905f5260205f209060060201600501541115612116578180611e0890613ca8565b9250505f878381548110611e1f57611e1e61304b565b5b905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054611eae90612f36565b80601f0160208091040260200160405190810160405280929190818152602001828054611eda90612f36565b8015611f255780601f10611efc57610100808354040283529160200191611f25565b820191905f5260205f20905b815481529060010190602001808311611f0857829003601f168201915b50505050508152602001600482015f9054906101000a900460ff1660ff1660ff1681526020016005820154815250509050878281548110611f6957611f6861304b565b5b905f5260205f209060060201888481548110611f8857611f8761304b565b5b905f5260205f2090600602015f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201548160010155600282015481600201556003820181600301908161201f9190613d04565b50600482015f9054906101000a900460ff16816004015f6101000a81548160ff021916908360ff160217905550600582015481600501559050508088838154811061206d5761206c61304b565b5b905f5260205f2090600602015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816120e69190613921565b506080820151816004015f6101000a81548160ff021916908360ff16021790555060a08201518160050155905050505b8080600101915050611dcb565b505f866001836121339190613c67565b815481106121445761214361304b565b5b905f5260205f2090600602016040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820180546121d390612f36565b80601f01602080910402602001604051908101604052809291908181526020018280546121ff90612f36565b801561224a5780601f106122215761010080835404028352916020019161224a565b820191905f5260205f20905b81548152906001019060200180831161222d57829003601f168201915b50505050508152602001600482015f9054906101000a900460ff1660ff1660ff168152602001600582015481525050905086858154811061228e5761228d61304b565b5b905f5260205f209060060201876001846122a89190613c67565b815481106122b9576122b861304b565b5b905f5260205f2090600602015f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155600382018160030190816123509190613d04565b50600482015f9054906101000a900460ff16816004015f6101000a81548160ff021916908360ff160217905550600582015481600501559050508087868154811061239e5761239d61304b565b5b905f5260205f2090600602015f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816124179190613921565b506080820151816004015f6101000a81548160ff021916908360ff16021790555060a082015181600501559050506001826124529190613c67565b93505050509392505050565b828054828255905f5260205f20908101928215612498579160200282015b8281111561249757825182559160200191906001019061247c565b5b5090506124a591906124c7565b5090565b5080545f8255905f5260205f20908101906124c491906124c7565b50565b5b808211156124de575f815f9055506001016124c8565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b612505816124f3565b811461250f575f5ffd5b50565b5f81359050612520816124fc565b92915050565b5f6020828403121561253b5761253a6124eb565b5b5f61254884828501612512565b91505092915050565b61255a816124f3565b82525050565b5f6020820190506125735f830184612551565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6125bb82612579565b6125c58185612583565b93506125d5818560208601612593565b6125de816125a1565b840191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612612826125e9565b9050919050565b61262281612608565b82525050565b5f60ff82169050919050565b61263d81612628565b82525050565b5f8115159050919050565b61265781612643565b82525050565b5f60e0820190506126705f83018a612551565b818103602083015261268281896125b1565b90506126916040830188612619565b61269e6060830187612551565b6126ab6080830186612551565b6126b860a0830185612634565b6126c560c083018461264e565b98975050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61270381612608565b82525050565b612712816124f3565b82525050565b5f82825260208201905092915050565b5f61273282612579565b61273c8185612718565b935061274c818560208601612593565b612755816125a1565b840191505092915050565b61276981612628565b82525050565b5f60c083015f8301516127845f8601826126fa565b5060208301516127976020860182612709565b5060408301516127aa6040860182612709565b50606083015184820360608601526127c28282612728565b91505060808301516127d76080860182612760565b5060a08301516127ea60a0860182612709565b508091505092915050565b5f612800838361276f565b905092915050565b5f602082019050919050565b5f61281e826126d1565b61282881856126db565b93508360208202850161283a856126eb565b805f5b85811015612875578484038952815161285685826127f5565b945061286183612808565b925060208a0199505060018101905061283d565b50829750879550505050505092915050565b5f6020820190508181035f83015261289f8184612814565b905092915050565b5f6020820190506128ba5f830184612634565b92915050565b5f6080820190506128d35f830187612619565b6128e06020830186612551565b6128ed6040830185612634565b6128fa606083018461264e565b95945050505050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61293d826125a1565b810181811067ffffffffffffffff8211171561295c5761295b612907565b5b80604052505050565b5f61296e6124e2565b905061297a8282612934565b919050565b5f67ffffffffffffffff82111561299957612998612907565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b5f5ffd5b6129bf81612608565b81146129c9575f5ffd5b50565b5f813590506129da816129b6565b92915050565b5f5ffd5b5f67ffffffffffffffff8211156129fe576129fd612907565b5b612a07826125a1565b9050602081019050919050565b828183375f83830152505050565b5f612a34612a2f846129e4565b612965565b905082815260208101848484011115612a5057612a4f6129e0565b5b612a5b848285612a14565b509392505050565b5f82601f830112612a7757612a76612903565b5b8135612a87848260208601612a22565b91505092915050565b612a9981612628565b8114612aa3575f5ffd5b50565b5f81359050612ab481612a90565b92915050565b5f60c08284031215612acf57612ace6129ae565b5b612ad960c0612965565b90505f612ae8848285016129cc565b5f830152506020612afb84828501612512565b6020830152506040612b0f84828501612512565b604083015250606082013567ffffffffffffffff811115612b3357612b326129b2565b5b612b3f84828501612a63565b6060830152506080612b5384828501612aa6565b60808301525060a0612b6784828501612512565b60a08301525092915050565b5f612b85612b808461297f565b612965565b90508083825260208201905060208402830185811115612ba857612ba76129aa565b5b835b81811015612bef57803567ffffffffffffffff811115612bcd57612bcc612903565b5b808601612bda8982612aba565b85526020850194505050602081019050612baa565b5050509392505050565b5f82601f830112612c0d57612c0c612903565b5b8135612c1d848260208601612b73565b91505092915050565b5f5f60408385031215612c3c57612c3b6124eb565b5b5f83013567ffffffffffffffff811115612c5957612c586124ef565b5b612c6585828601612bf9565b9250506020612c7685828601612512565b9150509250929050565b5f602082019050612c935f83018461264e565b92915050565b5f5f60408385031215612caf57612cae6124eb565b5b5f612cbc85828601612512565b9250506020612ccd85828601612aa6565b9150509250929050565b5f5f5f60608486031215612cee57612ced6124eb565b5b5f612cfb86828701612512565b9350506020612d0c86828701612512565b9250506040612d1d86828701612512565b9150509250925092565b5f5f5f5f5f5f60c08789031215612d4157612d406124eb565b5b5f612d4e89828a01612512565b965050602087013567ffffffffffffffff811115612d6f57612d6e6124ef565b5b612d7b89828a01612a63565b9550506040612d8c89828a01612512565b9450506060612d9d89828a01612512565b9350506080612dae89828a01612aa6565b92505060a0612dbf89828a01612512565b9150509295509295509295565b5f5f60408385031215612de257612de16124eb565b5b5f612def85828601612512565b9250506020612e0085828601612512565b9150509250929050565b5f60c082019050612e1d5f830189612619565b612e2a6020830188612551565b612e376040830187612551565b8181036060830152612e4981866125b1565b9050612e586080830185612634565b612e6560a0830184612551565b979650505050505050565b5f5f5f5f60808587031215612e8857612e876124eb565b5b5f612e9587828801612512565b9450506020612ea687828801612512565b935050604085013567ffffffffffffffff811115612ec757612ec66124ef565b5b612ed387828801612a63565b9250506060612ee487828801612aa6565b91505092959194509250565b5f602082019050612f035f830184612619565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612f4d57607f821691505b602082108103612f6057612f5f612f09565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612f9d826124f3565b9150612fa8836124f3565b9250828203905081811115612fc057612fbf612f66565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612ffd826124f3565b9150613008836124f3565b92508261301857613017612fc6565b5b828204905092915050565b5f61302d82612628565b915060ff82036130405761303f612f66565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f5468652061676520697320696e76616c696400000000000000000000000000005f82015250565b5f6130ac601283612583565b91506130b782613078565b602082019050919050565b5f6020820190508181035f8301526130d9816130a0565b9050919050565b7f54686520416164686172206e6f20697320696e76616c696400000000000000005f82015250565b5f613114601883612583565b915061311f826130e0565b602082019050919050565b5f6020820190508181035f83015261314181613108565b9050919050565b7f54686520566f74657220697320616c72656164792072656769737465726564005f82015250565b5f61317c601f83612583565b915061318782613148565b602082019050919050565b5f6020820190508181035f8301526131a981613170565b9050919050565b7f5468657265206973206e6f207375636820706f6c6c00000000000000000000005f82015250565b5f6131e4601583612583565b91506131ef826131b0565b602082019050919050565b5f6020820190508181035f830152613211816131d8565b9050919050565b7f596f7520617265206e6f742072656769737465726564206173206120766f74655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f613272602183612583565b915061327d82613218565b604082019050919050565b5f6020820190508181035f83015261329f81613266565b9050919050565b7f596f75206861766520616c726561647920766f746564000000000000000000005f82015250565b5f6132da601683612583565b91506132e5826132a6565b602082019050919050565b5f6020820190508181035f830152613307816132ce565b9050919050565b7f596f7520617265206e6f7420656c696769626c6520666f7220766f74696e67205f8201527f696e207468697320706f6c6c0000000000000000000000000000000000000000602082015250565b5f613368602c83612583565b91506133738261330e565b604082019050919050565b5f6020820190508181035f8301526133958161335c565b9050919050565b7f54686520706f6c6c20686173206e6f74207374617274656400000000000000005f82015250565b5f6133d0601883612583565b91506133db8261339c565b602082019050919050565b5f6020820190508181035f8301526133fd816133c4565b9050919050565b7f54686520706f6c6c20686173206265656e20636c6f73656400000000000000005f82015250565b5f613438601883612583565b915061344382613404565b602082019050919050565b5f6020820190508181035f8301526134658161342c565b9050919050565b5f613476826124f3565b9150613481836124f3565b925082820190508082111561349957613498612f66565b5b92915050565b7f5468652063616e646964617465206973206e6f742072656769737465726564005f82015250565b5f6134d3601f83612583565b91506134de8261349f565b602082019050919050565b5f6020820190508181035f830152613500816134c7565b9050919050565b7f5468652041646d696e20697320616c72656164792072656769737465726564005f82015250565b5f61353b601f83612583565b915061354682613507565b602082019050919050565b5f6020820190508181035f8301526135688161352f565b9050919050565b7f54686520506f6c6c20496420697320616c72656164792074616b656e206279205f8201527f616e6f7468657220506f6c6c0000000000000000000000000000000000000000602082015250565b5f6135c9602c83612583565b91506135d48261356f565b604082019050919050565b5f6020820190508181035f8301526135f6816135bd565b9050919050565b7f5468652054696d652069732065697468657220546f6f20736d616c6c206f72205f8201527f6e6f742076616c69640000000000000000000000000000000000000000000000602082015250565b5f613657602983612583565b9150613662826135fd565b604082019050919050565b5f6020820190508181035f8301526136848161364b565b9050919050565b7f496e76616c6964204167650000000000000000000000000000000000000000005f82015250565b5f6136bf600b83612583565b91506136ca8261368b565b602082019050919050565b5f6020820190508181035f8301526136ec816136b3565b9050919050565b7f5468657265206973206e6f20737563682061646d696e206f7220596f752061725f8201527f65206e6f7420616e2061646d696e000000000000000000000000000000000000602082015250565b5f61374d602e83612583565b9150613758826136f3565b604082019050919050565b5f6020820190508181035f83015261377a81613741565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026137dd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137a2565b6137e786836137a2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61382261381d613818846124f3565b6137ff565b6124f3565b9050919050565b5f819050919050565b61383b83613808565b61384f61384782613829565b8484546137ae565b825550505050565b5f5f905090565b613866613857565b613871818484613832565b505050565b5b81811015613894576138895f8261385e565b600181019050613877565b5050565b601f8211156138d9576138aa81613781565b6138b384613793565b810160208510156138c2578190505b6138d66138ce85613793565b830182613876565b50505b505050565b5f82821c905092915050565b5f6138f95f19846008026138de565b1980831691505092915050565b5f61391183836138ea565b9150826002028217905092915050565b61392a82612579565b67ffffffffffffffff81111561394357613942612907565b5b61394d8254612f36565b613958828285613898565b5f60209050601f831160018114613989575f8415613977578287015190505b6139818582613906565b8655506139e8565b601f19841661399786613781565b5f5b828110156139be57848901518255600182019150602085019450602081019050613999565b868310156139db57848901516139d7601f8916826138ea565b8355505b6001600288020188555050505b505050505050565b7f5468652075736572206973206e6f7420616e2041646d696e00000000000000005f82015250565b5f613a24601883612583565b9150613a2f826139f0565b602082019050919050565b5f6020820190508181035f830152613a5181613a18565b9050919050565b7f5468652075736572206973206e6f7420616e20566f74657200000000000000005f82015250565b5f613a8c601883612583565b9150613a9782613a58565b602082019050919050565b5f6020820190508181035f830152613ab981613a80565b9050919050565b7f5468652043616e64696461746520697320616c72656164792070726573656e745f82015250565b5f613af4602083612583565b9150613aff82613ac0565b602082019050919050565b5f6020820190508181035f830152613b2181613ae8565b9050919050565b7f54686520506f6c6c20686173206265656e2073746172746564000000000000005f82015250565b5f613b5c601983612583565b9150613b6782613b28565b602082019050919050565b5f6020820190508181035f830152613b8981613b50565b9050919050565b7f596f752061726520736d616c6c6572207468656e2072657175697265642061675f8201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b5f613bea602183612583565b9150613bf582613b90565b604082019050919050565b5f6020820190508181035f830152613c1781613bde565b9050919050565b5f819050919050565b5f613c3182613c1e565b9150613c3c83613c1e565b925082820390508181125f8412168282135f851215161715613c6157613c60612f66565b5b92915050565b5f613c7182613c1e565b9150613c7c83613c1e565b92508282019050828112155f8312168382125f841215161715613ca257613ca1612f66565b5b92915050565b5f613cb282613c1e565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613ce457613ce3612f66565b5b600182019050919050565b5f81549050613cfd81612f36565b9050919050565b818103613d12575050613de7565b613d1b82613cef565b67ffffffffffffffff811115613d3457613d33612907565b5b613d3e8254612f36565b613d49828285613898565b5f601f831160018114613d76575f8415613d64578287015490505b613d6e8582613906565b865550613de0565b601f198416613d8487613781565b9650613d8f86613781565b5f5b82811015613db657848901548255600182019150600185019450602081019050613d91565b86831015613dd35784890154613dcf601f8916826138ea565b8355505b6001600288020188555050505b5050505050505b56fea26469706673582212201f693ce0907dd09e1b2d24bcdd945fa4329e17fc82ee20ff5bd3c0e0a97e31f764736f6c634300081b0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ALLADMIN = "AllAdmin";

    public static final String FUNC_ALLPOLLS = "AllPolls";

    public static final String FUNC_ALLVOTER = "AllVoter";

    public static final String FUNC_ALLVOTERAADHAR = "AllVoterAadhar";

    public static final String FUNC_LISTOFCANDIDATE = "ListOfCandidate";

    public static final String FUNC_VOTERSWHOHAVEVOTED = "VotersWhoHaveVoted";

    public static final String FUNC_CASTVOTE = "castVote";

    public static final String FUNC_COUNTDIGIT = "countDigit";

    public static final String FUNC_CREATEADMIN = "createAdmin";

    public static final String FUNC_CREATECANDIDATE = "createCandidate";

    public static final String FUNC_CREATEPOLL = "createPoll";

    public static final String FUNC_CREATEVOTER = "createVoter";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_ISCANDIDATEPRESENT = "isCandidatePresent";

    public static final String FUNC_SORTCANDIDATES = "sortCandidates";

    public static final String FUNC_VIEWPOLLRESULT = "viewPollResult";

    @Deprecated
    protected PollCreator(String contractAddress, Web3j web3j, Credentials credentials,
                          BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PollCreator(String contractAddress, Web3j web3j, Credentials credentials,
                          ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PollCreator(String contractAddress, Web3j web3j,
                          TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PollCreator(String contractAddress, Web3j web3j,
                          TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>> AllAdmin(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLADMIN,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>> AllPolls(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLPOLLS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>> AllVoter(
            BigInteger param0) {
        final Function function = new Function(FUNC_ALLVOTER,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> AllVoterAadhar(BigInteger param0) {
        final Function function = new Function(FUNC_ALLVOTERAADHAR,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>> ListOfCandidate(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_LISTOFCANDIDATE,
                Arrays.<Type>asList(new Uint256(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> VotersWhoHaveVoted(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_VOTERSWHOHAVEVOTED,
                Arrays.<Type>asList(new Uint256(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> castVote(BigInteger pollIdInput,
                                                           BigInteger candidateAadharInput, BigInteger voterAadharNoInput) {
        final Function function = new Function(
                FUNC_CASTVOTE,
                Arrays.<Type>asList(new Uint256(pollIdInput),
                        new Uint256(candidateAadharInput),
                        new Uint256(voterAadharNoInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> countDigit(BigInteger number) {
        final Function function = new Function(FUNC_COUNTDIGIT,
                Arrays.<Type>asList(new Uint256(number)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createAdmin(BigInteger aadharNoInput,
                                                              BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATEADMIN,
                Arrays.<Type>asList(new Uint256(aadharNoInput),
                        new Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createCandidate(BigInteger aadharNoInput,
                                                                  BigInteger pollIdInput, String agendaInput, BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATECANDIDATE,
                Arrays.<Type>asList(new Uint256(aadharNoInput),
                        new Uint256(pollIdInput),
                        new Utf8String(agendaInput),
                        new Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createPoll(BigInteger pollIdInput,
                                                             String agendaOfPollInput, BigInteger startTimeInput, BigInteger endTimeInput,
                                                             BigInteger ageInput, BigInteger adminAadharNo) {
        final Function function = new Function(
                FUNC_CREATEPOLL,
                Arrays.<Type>asList(new Uint256(pollIdInput),
                        new Utf8String(agendaOfPollInput),
                        new Uint256(startTimeInput),
                        new Uint256(endTimeInput),
                        new Uint8(ageInput),
                        new Uint256(adminAadharNo)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createVoter(BigInteger aadharNoInput,
                                                              BigInteger ageInput) {
        final Function function = new Function(
                FUNC_CREATEVOTER,
                Arrays.<Type>asList(new Uint256(aadharNoInput),
                        new Uint8(ageInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAdmin(BigInteger aadharNoInput) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new Uint256(aadharNoInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getCandidates(BigInteger pollIdInput) {
        final Function function = new Function(FUNC_GETCANDIDATES,
                Arrays.<Type>asList(new Uint256(pollIdInput)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isCandidatePresent(List<Candidate> _candidates,
                                                          BigInteger aadharNo) {
        final Function function = new Function(FUNC_ISCANDIDATEPRESENT,
                Arrays.<Type>asList(new DynamicArray<Candidate>(Candidate.class, _candidates),
                        new Uint256(aadharNo)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> sortCandidates(BigInteger pollIdInput) {
        final Function function = new Function(
                FUNC_SORTCANDIDATES,
                Arrays.<Type>asList(new Uint256(pollIdInput)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> viewPollResult(BigInteger pollIdInput) {
        final Function function = new Function(FUNC_VIEWPOLLRESULT,
                Arrays.<Type>asList(new Uint256(pollIdInput)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static PollCreator load(String contractAddress, Web3j web3j, Credentials credentials,
                                   BigInteger gasPrice, BigInteger gasLimit) {
        return new PollCreator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PollCreator load(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PollCreator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PollCreator load(String contractAddress, Web3j web3j, Credentials credentials,
                                   ContractGasProvider contractGasProvider) {
        return new PollCreator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PollCreator load(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PollCreator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PollCreator> deploy(Web3j web3j, Credentials credentials,
                                                 ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PollCreator.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<PollCreator> deploy(Web3j web3j, Credentials credentials,
                                                 BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PollCreator.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<PollCreator> deploy(Web3j web3j, TransactionManager transactionManager,
                                                 ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PollCreator.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<PollCreator> deploy(Web3j web3j, TransactionManager transactionManager,
                                                 BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PollCreator.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Candidate extends DynamicStruct {
        public String _candidate;

        public BigInteger _aadharNo;

        public BigInteger _pollId;

        public String _agenda;

        public BigInteger _age;

        public BigInteger _voteCount;

        public Candidate(String _candidate, BigInteger _aadharNo, BigInteger _pollId,
                         String _agenda, BigInteger _age, BigInteger _voteCount) {
            super(new Address(160, _candidate),
                    new Uint256(_aadharNo),
                    new Uint256(_pollId),
                    new Utf8String(_agenda),
                    new Uint8(_age),
                    new Uint256(_voteCount));
            this._candidate = _candidate;
            this._aadharNo = _aadharNo;
            this._pollId = _pollId;
            this._agenda = _agenda;
            this._age = _age;
            this._voteCount = _voteCount;
        }

        public Candidate(Address _candidate, Uint256 _aadharNo, Uint256 _pollId, Utf8String _agenda,
                         Uint8 _age, Uint256 _voteCount) {
            super(_candidate, _aadharNo, _pollId, _agenda, _age, _voteCount);
            this._candidate = _candidate.getValue();
            this._aadharNo = _aadharNo.getValue();
            this._pollId = _pollId.getValue();
            this._agenda = _agenda.getValue();
            this._age = _age.getValue();
            this._voteCount = _voteCount.getValue();
        }
    }
}
